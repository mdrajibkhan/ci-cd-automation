name: Deploy Python App to RHEL/AlmaLinux

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  # Remote paths
  REMOTE_APP_DIR: /opt/myapp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Basic tests
        run: |
          python - <<'PY'
          import importlib
          for m in ("flask","gunicorn"):
              importlib.import_module(m)
          print("Deps OK.")
          PY

      - name: Package artifact
        run: |
          tar -czf myapp.tar.gz app.py wsgi.py requirements.txt

      - name: Copy code to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}         # e.g. 203.0.113.10
          username: ${{ secrets.SSH_USER }}     # e.g. deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}   # private key content
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "myapp.tar.gz"
          target: "${{ env.REMOTE_APP_DIR }}/"

      - name: Unpack and stage on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -euo pipefail
            cd "${REMOTE_APP_DIR}"
            # backup (lightweight)
            ts=$(date +%Y%m%d%H%M%S)
            mkdir -p releases/$ts
            # unpack
            tar -xzf myapp.tar.gz -C releases/$ts
            # promote to current
            rsync -a --delete releases/$ts/ .
            rm -f myapp.tar.gz

      - name: Run server-side deploy steps
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            bash "${REMOTE_APP_DIR}/deploy.sh"

      - name: Verify health
        run: |
          curl -fsS "http://${{ secrets.PUBLIC_APP_HOST || secrets.SSH_HOST }}:8000/healthz"
