name: Deploy Python App to RHEL/AlmaLinux

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  APP_SUBDIR: Day-02/python-app
  REMOTE_APP_DIR: /opt/myapp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (from subfolder)
        run: |
          python -m pip install --upgrade pip
          pip install -r "${APP_SUBDIR}/requirements.txt"

      - name: Basic import test
        run: |
          python - <<'PY'
          import importlib
          for m in ("flask","gunicorn"):
              importlib.import_module(m)
          print("Deps OK.")
          PY

      - name: Package app subdirectory
        run: |
          tar -C "${APP_SUBDIR}" -czf myapp.tar.gz app.py wsgi.py requirements.txt

      - name: Copy code to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}         # e.g. 203.0.113.10
          username: ${{ secrets.SSH_USER }}     # e.g. deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}   # private key content
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "myapp.tar.gz"
          target: "${{ env.REMOTE_APP_DIR }}/"

      - name: Unpack and stage on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -euo pipefail
            mkdir -p "${REMOTE_APP_DIR}"
            cd "${REMOTE_APP_DIR}"
            ts=$(date +%Y%m%d%H%M%S)
            mkdir -p releases/$ts
            tar -xzf myapp.tar.gz -C releases/$ts
            rsync -a --delete releases/$ts/ .
            rm -f myapp.tar.gz

      - name: Ensure deploy.sh and systemd unit exist, then deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -euo pipefail

            APP_DIR="${REMOTE_APP_DIR}"
            SERVICE_FILE="/etc/systemd/system/myapp.service"

            # Write/refresh deploy.sh (idempotent)
            cat > "${APP_DIR}/deploy.sh" <<'DEPLOY'
            #!/usr/bin/env bash
            set -euo pipefail

            APP_DIR="/opt/myapp"
            SERVICE_FILE="/etc/systemd/system/myapp.service"

            if [ ! -d "${APP_DIR}/.venv" ]; then
              python3 -m venv "${APP_DIR}/.venv"
            fi

            source "${APP_DIR}/.venv/bin/activate"
            pip install --upgrade pip
            pip install -r "${APP_DIR}/requirements.txt"

            if [ ! -f "${SERVICE_FILE}" ]; then
              sudo tee "${SERVICE_FILE}" > /dev/null <<'UNIT'
            [Unit]
            Description=My Python App (Gunicorn)
            After=network.target

            [Service]
            User=deploy
            Group=deploy
            WorkingDirectory=/opt/myapp
            Environment="PATH=/opt/myapp/.venv/bin"
            ExecStart=/opt/myapp/.venv/bin/gunicorn -w 2 -b 0.0.0.0:8000 wsgi:application
            Restart=always
            RestartSec=3

            [Install]
            WantedBy=multi-user.target
            UNIT
              sudo systemctl daemon-reload
              sudo systemctl enable myapp
            else
              sudo systemctl daemon-reload
            fi

            sudo systemctl restart myapp

            curl -fsS http://127.0.0.1:8000/healthz >/dev/null && echo "App healthy"
            DEPLOY

            chmod +x "${APP_DIR}/deploy.sh"

            bash "${APP_DIR}/deploy.sh"

      - name: Verify health
        run: |
          curl -fsS "http://${{ secrets.PUBLIC_APP_HOST || secrets.SSH_HOST }}:8000/healthz"
